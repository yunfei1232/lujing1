import random
import math
from itertools import permutations

# 定义城市坐标和距离矩阵
cities = {
    "city1":  (41, 94),
    "city2":  (37, 84),
    "city3":  (54, 67),
    "city4":  (25, 62),
    "city5":  (7, 64),
    "city6":  (2, 99),
    "city7":  (68, 58),
    "city8":  (71, 44),
    "city9":  (54, 62),
    "city10": (83, 69)
}

# 定义城市之间的航空运输距离和铁路运输距离（以公里为单位）以及每单位的运输成本
transport_distances = {
    ("city1", "city2"): {"air": 150, "rail": 100},
    ("city1", "city3"): {"air": 342, "rail": 595},
    ("city1", "city4"): {"air": 0, "rail": 822},
    ("city2", "city3"): {"air": 512, "rail": 757},
    ("city2", "city6"): {"air": 373, "rail": 456},
    ("city3", "city4"): {"air": 0, "rail": 331},
    ("city3", "city5"): {"air": 726, "rail": 529},
    ("city3", "city6"): {"air": 0, "rail": 244},
    ("city3", "city7"): {"air": 334, "rail": 417},
    ("city4", "city5"): {"air": 271, "rail": 349},
    ("city4", "city7"): {"air": 482, "rail": 351},
    ("city4", "city8"): {"air": 610, "rail": 450},
    ("city4", "city9"): {"air": 407, "rail": 422},
    ("city6", "city7"): {"air": 339, "rail": 313},
    ("city6", "city10"): {"air": 0, "rail": 613},
    ("city7", "city8"): {"air": 239, "rail": 237},
    ("city7", "city10"): {"air": 0, "rail": 377},
    ("city8", "city9"): {"air": 335, "rail": 324},
    ("city9", "city10"): {"air":450, "rail": 384},
}
# 定义一些全局变量
air_transport_cost_per_km = 20
rail_transport_cost_per_km = 8
air_speed_km_per_hour = 120
rail_speed_km_per_hour = 80

# 定义参数
time_weight = 1.8
cost_weight = 1.0
population_size = 200
num_generations = 200
indpb = 0.25
leader_sparrow_ratio = 0.05
alertness_value = 0.15
exploration_factor = 0.8
exploitation_factor = 0.8
max_depth = 40


# 创建城市列表
cities_list = list(set(city for city_pair in transport_distances.keys() for city in city_pair if city not in ["city1", "city10"]))

# 获取两个城市之间的运输信息
def get_transport_info(city1, city2):
    if (city1, city2) in transport_distances:
        air_distance = transport_distances[(city1, city2)].get("air", 0)
        rail_distance = transport_distances[(city1, city2)].get("rail", 0)
        if air_distance > 0:
            time = air_distance / air_speed_km_per_hour
            cost = air_distance * air_transport_cost_per_km
            return "air", air_distance, time, cost
        elif rail_distance > 0:
            time = rail_distance / rail_speed_km_per_hour
            cost = rail_distance * rail_transport_cost_per_km
            return "rail", rail_distance, time, cost
    return "none", 0, 0, 0

# 检查路径的每个段是否有效
def is_valid_segment(segment):
    _, _, time, cost = get_transport_info(segment[0], segment[1])
    return time != 0 and cost != 0


def dls_find_valid_path(current_city, goal_city, depth, path, visited):
    if current_city == goal_city:
        return path
    if depth <= 0:
        return None
    for next_city in cities_list + [goal_city]:
        if next_city not in visited and is_valid_segment((current_city, next_city)):
            visited.add(next_city)
            path.append((current_city, next_city))
            result = dls_find_valid_path(next_city, goal_city, depth - 1, path.copy(), visited.copy())
            if result is not None:
                return result
            path.pop()  # 回溯
            visited.remove(next_city)
    return None

# 迭代加深深度优先搜索（IDDFS）
def iddfs_find_valid_path(start_city, goal_city, max_depth):
    for depth in range(1, max_depth + 1):
        visited = {start_city}
        path = dls_find_valid_path(start_city, goal_city, depth, [], visited)
        if path is not None:
            return path
    return None

# 确保路径连续性的函数
def is_path_continuous(path):
    for i in range(len(path) - 1):
        if not is_valid_segment((path[i][1], path[i+1][0])):
            return False
    return True

# 生成有效的个体函数使用IDDFS方法
def generate_individual_with_iddfs():
    start_city = "city1"
    goal_city = "city10"
    path = iddfs_find_valid_path(start_city, goal_city, max_depth)  # 使用全局变量max_depth
    return path


# 计算路径的总距离、成本和时间
def calculate_total_distance_cost_and_time(segments):
    total_distance = total_cost = total_time = 0
    for segment in segments:
        _, distance, time, cost = get_transport_info(segment[0], segment[1])
        total_distance += distance
        total_cost += cost
        total_time += time
    return total_distance, total_cost, total_time


# 计算给定路径的适应度
def calculate_fitness(path):
    total_distance, total_cost, total_time = calculate_total_distance_cost_and_time(path)
    if total_distance == float('inf') or total_cost == 0 or total_time == 0:
        return 0
    fitness = 1 / (cost_weight * total_cost + time_weight * total_time)
    return fitness


def find_path_with_intermediate_cities(start_city, end_city, visited):
    """
    尝试通过中间城市找到从start_city到end_city的路径。
    """
    if is_valid_segment((start_city, end_city)):
        return [(start_city, end_city)]

    for city in cities_list:
        if city not in visited and is_valid_segment((start_city, city)) and is_valid_segment((city, end_city)):
            return [(start_city, city), (city, end_city)]

    return None


def improved_dfs_find_valid_path(current_city, path, visited):
    if current_city == "city10":
        return path

    next_cities = cities_list + ["city10"]
    random.shuffle(next_cities)

    for next_city in next_cities:
        if next_city not in visited:
            segment_validity, new_path_segment = is_segment_valid_with_intermediates(current_city, next_city, visited)
            if segment_validity:
                new_path = path + new_path_segment
                new_visited = visited | set([city for segment in new_path_segment for city in segment])
                result = improved_dfs_find_valid_path(next_city, new_path, new_visited)
                if result:
                    return result
    return None


def is_segment_valid_with_intermediates(city1, city2, visited):
    """
    检查并尝试通过直接或间接路径连接city1和city2。
    返回一个布尔值指示是否找到有效路径和路径段列表。
    """
    if is_valid_segment((city1, city2)):
        return True, [(city1, city2)]

    for intermediate_city in cities_list:
        if intermediate_city not in visited:
            if is_valid_segment((city1, intermediate_city)) and is_valid_segment((intermediate_city, city2)):
                return True, [(city1, intermediate_city), (intermediate_city, city2)]
    return False, []

# 定义麻雀类
class Sparrow:
    def __init__(self, path):
        self.path = path
        self.fitness = calculate_fitness(path) if path else 0
        self.objectives = calculate_total_distance_cost_and_time(path) if path else [float('inf'), float('inf'), float('inf')]

    def update_fitness(self):
        self.fitness = calculate_fitness(self.path)

    def calculate_fitness(self, path):
        total_distance, total_cost, total_time = calculate_total_distance_cost_and_time(path)
        if total_distance == float('inf') or total_cost == 0 or total_time == 0:
            return 0
        return 1 / (cost_weight * total_cost + time_weight * total_time)

# 生成初始种群
def generate_initial_population(size):
    return [Sparrow(generate_individual_with_iddfs()) for _ in range(size)]


# 更新麻雀位置的函数
def update_sparrow(sparrow, best_sparrow):
    # 随机选择是否重新生成路径
    if random.random() < 0.1:
        new_individual = generate_individual_with_iddfs()
        if new_individual:
            sparrow.path = new_individual
            sparrow.fitness = calculate_fitness(sparrow.path)
            return sparrow

    # 如果best_sparrow为None，表示自我更新，此处可以根据需要添加逻辑
    if best_sparrow is None:
        # 自我更新的逻辑（例如，随机变异）
        # 这里暂时留空，具体实现依赖于算法的设计
        pass
    else:
        # 基于best_sparrow进行更新
        # 简单示例：随机选择一个段落从best_sparrow的路径复制到当前路径
        if len(best_sparrow.path) > 1 and len(sparrow.path) > 1:
            idx = random.randint(0, len(best_sparrow.path) - 2)
            # 确保选择的段在当前麻雀的路径中是有效的
            if is_valid_segment(best_sparrow.path[idx]):
                sparrow.path[idx] = best_sparrow.path[idx]
                # 重新计算适应度
                sparrow.fitness = calculate_fitness(sparrow.path)

    # 检查更新后的路径连续性，如果不连续则回退
    if not is_path_continuous(sparrow.path):
        # 如果新路径不连续，尝试恢复到原来的路径或采取其他补救措施
        sparrow.path = generate_individual_with_iddfs()
        sparrow.fitness = calculate_fitness(sparrow.path)

    return sparrow


# 麻雀算法主函数
def sparrow_search(population_size, num_generations):
    population = generate_initial_population(population_size)
    leader_count = int(population_size * leader_sparrow_ratio)

    for _ in range(num_generations):
        population.sort(key=lambda sparrow: sparrow.fitness, reverse=True)

        leaders = population[:leader_count]
        followers = population[leader_count:]

        for sparrow in followers:
            selected_leader = random.choice(leaders)
            update_sparrow(sparrow, selected_leader)

        for sparrow in leaders:
            update_sparrow(sparrow, None)

    # 对最终的种群按适应度进行排序，并返回具有最高适应度的前10个麻雀
    sorted_population = sorted(population, key=lambda sparrow: sparrow.fitness, reverse=True)
    return sorted_population[:10]  # 返回适应度最高的前10个麻雀


# 运行麻雀算法并获取最终的种群
final_top_sparrows = sparrow_search(population_size, num_generations)

# 打印排名前10的解
print("排名前10的解：")
for i, sparrow in enumerate(final_top_sparrows, start=1):
    print(f"Rank {i}: Path = {sparrow.path}, Fitness = {sparrow.fitness}, Objectives = {sparrow.objectives}")





