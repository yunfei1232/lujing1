import random
import math

# 定义城市坐标和距离矩阵
cities = {
    "city1":  (41, 94),
    "city2":  (37, 84),
    "city3":  (54, 67),
    "city4":  (25, 62),
    "city5":  (7, 64),
    "city6":  (2, 99),
    "city7":  (68, 58),
    "city8":  (71, 44),
    "city9":  (54, 62),
    "city10": (83, 69)
}

# 定义城市之间的航空运输距离和铁路运输距离（以公里为单位）以及每单位的运输成本
transport_distances = {
    ("city1", "city2"): {"air": 150, "rail": 100},
    ("city1", "city3"): {"air": 342, "rail": 595},
    ("city1", "city4"): {"air": 0, "rail": 822},
    ("city2", "city3"): {"air": 512, "rail": 757},
    ("city2", "city6"): {"air": 373, "rail": 456},
    ("city3", "city4"): {"air": 0, "rail": 331},
    ("city3", "city5"): {"air": 726, "rail": 529},
    ("city3", "city6"): {"air": 0, "rail": 244},
    ("city3", "city7"): {"air": 334, "rail": 417},
    ("city4", "city5"): {"air": 271, "rail": 349},
    ("city4", "city7"): {"air": 482, "rail": 351},
    ("city4", "city8"): {"air": 610, "rail": 450},
    ("city4", "city9"): {"air": 407, "rail": 422},
    ("city6", "city7"): {"air": 339, "rail": 313},
    ("city6", "city10"): {"air": 0, "rail": 613},
    ("city7", "city8"): {"air": 239, "rail": 237},
    ("city7", "city10"): {"air": 0, "rail": 377},
    ("city8", "city9"): {"air": 335, "rail": 324},
    ("city9", "city10"): {"air":450, "rail": 384},
}



# 获取两个城市之间运输信息的函数
def get_transport_info(city1, city2):
    if (city1, city2) in transport_distances:
        air_distance = transport_distances[(city1, city2)].get("air", 0)
        rail_distance = transport_distances[(city1, city2)].get("rail", 0)

        if air_distance > 0:
            time = air_distance / air_speed_km_per_hour
            return "air", air_distance, time
        elif rail_distance > 0:
            time = rail_distance / rail_speed_km_per_hour
            return "rail", rail_distance, time
    return "none", 0, 0


# 定义一些全局变量
air_transport_cost_per_km = 20
rail_transport_cost_per_km = 8
air_speed_km_per_hour = 120
rail_speed_km_per_hour = 80


# 计算两个城市之间的距离
def distance(city1, city2):
    if city1 == city2:
        return float('inf')
    coord1, coord2 = cities[city1], cities[city2]
    return math.sqrt((coord1[0] - coord2[0]) ** 2 + (coord1[1] - coord2[1]) ** 2)


# 初始化信息素
pheromones = {route: 1 for route in transport_distances}

# 定义蚁群算法参数
num_ants = 200
num_iterations = 200
decay = 0.5
alpha = 1
beta = 2
pheromone_deposit = 1


# 定义蚁群类
class Ant:
    def __init__(self):
        self.path = ["city1"]
        self.total_distance = 0
        self.current_city = 'city1'

    def select_next_city(self):
        next_cities = [city for city in cities if
                       city not in self.path and (self.current_city, city) in transport_distances]
        if not next_cities:  # 如果没有可行的下一个城市，返回 None
            return None

        probabilities = []
        for next_city in next_cities:
            pheromone = pheromones.get((self.current_city, next_city), 0.1) ** alpha
            heuristic = (1.0 / distance(self.current_city, next_city)) ** beta
            probabilities.append(pheromone * heuristic)

        total = sum(probabilities)
        probabilities = [p / total for p in probabilities]
        next_city = random.choices(next_cities, probabilities)[0]
        return next_city

    def move_to_next_city(self, next_city):
        if next_city:
            self.path.append(next_city)
            self.total_distance += distance(self.current_city, next_city)
            self.current_city = next_city


# 运行蚁群算法
best_path = None
best_distance = float('inf')
for _ in range(num_iterations):
    ants = [Ant() for _ in range(num_ants)]
    for ant in ants:
        while ant.current_city != "city10":
            next_city = ant.select_next_city()
            if next_city is None:
                break  # 如果没有有效的下一个城市，结束循环
            ant.move_to_next_city(next_city)
        if ant.path[-1] == "city10" and ant.total_distance < best_distance:
            best_distance = ant.total_distance
            best_path = ant.path

    for route in pheromones:
        pheromones[route] *= (1 - decay)
        for ant in ants:
            if route in zip(ant.path, ant.path[1:]):
                pheromones[route] += pheromone_deposit / ant.total_distance


# 打印路径信息和计算总运输成本与时间
def print_path_info(path):
    total_cost = 0
    total_time = 0
    for i in range(len(path) - 1):
        city1, city2 = path[i], path[i + 1]
        transport_mode, distance, time = get_transport_info(city1, city2)
        if transport_mode != "none":
            cost = distance * (air_transport_cost_per_km if transport_mode == "air" else rail_transport_cost_per_km)
            total_cost += cost
            total_time += time
            print(f"从 {city1} 到 {city2}：方式 - {transport_mode}, 距离 - {distance} km, 时间 - {time:.2f} 小时, 成本 - {cost:.2f} 元")
    return total_cost, total_time

total_cost, total_time = print_path_info(best_path)
print("总运输成本: {:.2f} 元".format(total_cost))
print("总运输时间: {:.2f} 小时".format(total_time))
